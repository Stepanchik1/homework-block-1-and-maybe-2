public class Main {
    // Программа работает так: объект Book класса EmployeeBook содержит массив данных о сотрудниках предприятия
    // Всего массив расчитан на 50000 сотрудников
    // На предприятии 5 отделов, под каждый отдел в памяти массива отведено по 10000 мест для сотрудников
    // Каждому сотруднику присваивается свой уникальный ID, соответствующий номеру ячейки массива, содержащей данные об этом сотруднике
    // 1 цифра в номере ID - номер отдела, в котором числится сотрудник, остальные цифры - просто уникальный номер сотрудника
    // ID в отделе идут по порядку, но при желании ID можно изменить (если новый ID будет соотвествовать отделу сотрудника)
    // В программе можно создавать, менять, удалять, искать данные сотрудников, а также вычислять основные данные по зарплате

    public static void main(String[] args) {

        EmployeeBook Book = new EmployeeBook();
        //Создам несколько сотрудников, чтоб было удобно тестить программу
        Book.getEmployee()[0] = new Employee("Степан", "Кочетков", "Александрович", 10001, (byte)1, 89154921779l, false, 87000 );
        Book.getEmployee() [10000] = new Employee("Алексей", "Кочетков", "Витальевич", 20001, (byte)2, 89144567097l, false, 70000 );
        Book.getEmployee() [20000] = new Employee("Ксения", "Игнатова", "Ильична", 30001, (byte)3, 89176567213l, true, 70000 );
        Book.getEmployee() [40000] = new Employee("Александр", "Смирнов", "Витальевич", 50001, (byte)5, 89034456768l, true, 50000 );
        Book.getEmployee() [1] = new Employee("Александр", "Николаев", "Лукич", 10002, (byte)1, 89157773435l, false, 92000 );
        //Весь 4 отдел (отдел продаж) будет заполнен одинаковыми сотрудниками, отличающимися только по ID
        for (int i = 0; i < 10000; i++) {
            Book.getEmployee() [30000+i] = new Employee("Наум", "Штельман", "Сигизмундович", 40001+i, (byte)4, 89034456768l, true, 80000 );
        }
// С этого момента идет выполнение программы
        for (boolean i = false; i == false; ) {
            byte comand = Enter.comand();
            switch (comand) {
                case 1:
                    Book.createEmployee();
                    break;
                case 2:
                    Book.changeEmployee();
                    break;
                case 3:
                    Book.deleteEmployee();
                    break;
                case 4:
                    Book.findEmployeeCicle();
                    break;
                case 5:
                    Book.sorting();
                    break;
                case 0:
                    i = true;
                    break;
                default:
                    break;
            }
        }
    }
}
















